// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProdajaNekretnina.Services.Database;

#nullable disable

namespace ProdajaNekretnina.Services.Migrations
{
    [DbContext(typeof(SeminarskiNekretnineContext))]
    [Migration("20250429134704_mig")]
    partial class mig
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ProdajaNekretnina.Services.Database.Agencija", b =>
                {
                    b.Property<int>("AgencijaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AgencijaId"));

                    b.Property<string>("Adresa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DatumAzuriranja")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatumDodavanja")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KontaktOsoba")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AgencijaId");

                    b.HasIndex(new[] { "KorisnikId" }, "IX_Agencija_KorisnikId");

                    b.ToTable("Agencija", (string)null);
                });

            modelBuilder.Entity("ProdajaNekretnina.Services.Database.Agent", b =>
                {
                    b.Property<int>("AgentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AgentId"));

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.HasKey("AgentId");

                    b.HasIndex(new[] { "KorisnikId" }, "IX_Agent_KorisnikId");

                    b.ToTable("Agent", (string)null);
                });

            modelBuilder.Entity("ProdajaNekretnina.Services.Database.Drzava", b =>
                {
                    b.Property<int>("DrzavaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DrzavaId"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DrzavaId");

                    b.ToTable("Drzava", (string)null);
                });

            modelBuilder.Entity("ProdajaNekretnina.Services.Database.Grad", b =>
                {
                    b.Property<int>("GradId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GradId"));

                    b.Property<int>("DrzavaId")
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GradId");

                    b.HasIndex(new[] { "DrzavaId" }, "IX_Grad_DrzavaId");

                    b.ToTable("Grad", (string)null);
                });

            modelBuilder.Entity("ProdajaNekretnina.Services.Database.Kategorije", b =>
                {
                    b.Property<int>("KategorijaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KategorijaId"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("KategorijaId");

                    b.ToTable("Kategorije", (string)null);
                });

            modelBuilder.Entity("ProdajaNekretnina.Services.Database.KomentariAgentima", b =>
                {
                    b.Property<int>("KomentariAgentimaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KomentariAgentimaId"));

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime2");

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<int>("KupacId")
                        .HasColumnType("int");

                    b.Property<string>("Sadrzaj")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("KomentariAgentimaId");

                    b.HasIndex(new[] { "KorisnikId" }, "IX_KomentariAgentima_KorisnikId");

                    b.HasIndex(new[] { "KupacId" }, "IX_KomentariAgentima_KupacId");

                    b.ToTable("KomentariAgentima", (string)null);
                });

            modelBuilder.Entity("ProdajaNekretnina.Services.Database.Korisnici", b =>
                {
                    b.Property<int>("KorisnikId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KorisnikId"));

                    b.Property<byte[]>("BajtoviSlike")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("BrojUspjesnoProdanihNekretnina")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KorisnickoIme")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LozinkaHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LozinkaSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("RejtingKupaca")
                        .HasColumnType("real");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Telefon")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("KorisnikId");

                    b.ToTable("Korisnici", (string)null);
                });

            modelBuilder.Entity("ProdajaNekretnina.Services.Database.KorisniciUloge", b =>
                {
                    b.Property<int>("KorisnikUlogaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KorisnikUlogaId"));

                    b.Property<DateTime>("DatumIzmjene")
                        .HasColumnType("datetime2");

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<int>("UlogaId")
                        .HasColumnType("int");

                    b.HasKey("KorisnikUlogaId");

                    b.HasIndex(new[] { "KorisnikId" }, "IX_KorisniciUloge_KorisnikId");

                    b.HasIndex(new[] { "UlogaId" }, "IX_KorisniciUloge_UlogaId");

                    b.ToTable("KorisniciUloge", (string)null);
                });

            modelBuilder.Entity("ProdajaNekretnina.Services.Database.KorisnikAgencija", b =>
                {
                    b.Property<int>("KorisnikAgencijaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KorisnikAgencijaId"));

                    b.Property<int>("AgencijaId")
                        .HasColumnType("int");

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.HasKey("KorisnikAgencijaId");

                    b.HasIndex(new[] { "AgencijaId" }, "IX_KorisnikAgencija_AgencijaId");

                    b.HasIndex(new[] { "KorisnikId" }, "IX_KorisnikAgencija_KorisnikId");

                    b.ToTable("KorisnikAgencija", (string)null);
                });

            modelBuilder.Entity("ProdajaNekretnina.Services.Database.KorisnikNekretninaWish", b =>
                {
                    b.Property<int>("KorisnikNekretninaWishId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KorisnikNekretninaWishId"));

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<int>("NekretninaId")
                        .HasColumnType("int");

                    b.HasKey("KorisnikNekretninaWishId");

                    b.HasIndex(new[] { "KorisnikId" }, "IX_KorisnikNekretninaWish_KorisnikId");

                    b.HasIndex(new[] { "NekretninaId" }, "IX_KorisnikNekretninaWish_NekretninaId");

                    b.ToTable("KorisnikNekretninaWish", (string)null);
                });

            modelBuilder.Entity("ProdajaNekretnina.Services.Database.Kupci", b =>
                {
                    b.Property<int>("KupacId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KupacId"));

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientSecret")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DatumRegistracije")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KorisnickoIme")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LozinkaHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LozinkaSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("KupacId");

                    b.ToTable("Kupci", (string)null);
                });

            modelBuilder.Entity("ProdajaNekretnina.Services.Database.Lokacija", b =>
                {
                    b.Property<int>("LokacijaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LokacijaId"));

                    b.Property<int>("DrzavaId")
                        .HasColumnType("int");

                    b.Property<int>("GradId")
                        .HasColumnType("int");

                    b.Property<string>("PostanskiBroj")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ulica")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LokacijaId");

                    b.HasIndex(new[] { "DrzavaId" }, "IX_Lokacija_DrzavaId");

                    b.HasIndex(new[] { "GradId" }, "IX_Lokacija_GradId");

                    b.ToTable("Lokacija", (string)null);
                });

            modelBuilder.Entity("ProdajaNekretnina.Services.Database.Nekretnina", b =>
                {
                    b.Property<int>("NekretninaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NekretninaId"));

                    b.Property<int>("BrojSoba")
                        .HasColumnType("int");

                    b.Property<int>("BrojSpavacihSoba")
                        .HasColumnType("int");

                    b.Property<int>("BrojUgovora")
                        .HasColumnType("int");

                    b.Property<float>("Cijena")
                        .HasColumnType("real");

                    b.Property<DateTime>("DatumDodavanja")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatumIzmjene")
                        .HasColumnType("datetime2");

                    b.Property<string>("DetaljanOpis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsOdobrena")
                        .HasColumnType("bit");

                    b.Property<int>("KategorijaId")
                        .HasColumnType("int");

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<int>("Kvadratura")
                        .HasColumnType("int");

                    b.Property<int>("LokacijaId")
                        .HasColumnType("int");

                    b.Property<bool>("Namjesten")
                        .HasColumnType("bit");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Novogradnja")
                        .HasColumnType("bit");

                    b.Property<bool>("ParkingMjesto")
                        .HasColumnType("bit");

                    b.Property<int>("Sprat")
                        .HasColumnType("int");

                    b.Property<string>("StateMachine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TipNekretnineId")
                        .HasColumnType("int");

                    b.HasKey("NekretninaId");

                    b.HasIndex(new[] { "KategorijaId" }, "IX_Nekretnina_KategorijaId");

                    b.HasIndex(new[] { "KorisnikId" }, "IX_Nekretnina_KorisnikId");

                    b.HasIndex(new[] { "LokacijaId" }, "IX_Nekretnina_LokacijaId");

                    b.HasIndex(new[] { "TipNekretnineId" }, "IX_Nekretnina_TipNekretnineId");

                    b.ToTable("Nekretnina", (string)null);
                });

            modelBuilder.Entity("ProdajaNekretnina.Services.Database.NekretninaAgenti", b =>
                {
                    b.Property<int>("NekretninaAgentiID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NekretninaAgentiID"));

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<int>("NekretninaId")
                        .HasColumnType("int");

                    b.HasKey("NekretninaAgentiID");

                    b.HasIndex(new[] { "KorisnikId" }, "IX_NekretninaAgenti_KorisnikId");

                    b.HasIndex(new[] { "NekretninaId" }, "IX_NekretninaAgenti_NekretninaId");

                    b.ToTable("NekretninaAgenti", (string)null);
                });

            modelBuilder.Entity("ProdajaNekretnina.Services.Database.NekretninaTipAkcije", b =>
                {
                    b.Property<int>("NekretninaTipAkcijeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NekretninaTipAkcijeId"));

                    b.Property<int>("NekretninaId")
                        .HasColumnType("int");

                    b.Property<int>("TipAkcijeId")
                        .HasColumnType("int");

                    b.HasKey("NekretninaTipAkcijeId");

                    b.HasIndex(new[] { "NekretninaId" }, "IX_NekretninaTipAkcije_NekretninaId");

                    b.HasIndex(new[] { "TipAkcijeId" }, "IX_NekretninaTipAkcije_TipAkcijeId");

                    b.ToTable("NekretninaTipAkcije", (string)null);
                });

            modelBuilder.Entity("ProdajaNekretnina.Services.Database.Obilazak", b =>
                {
                    b.Property<int>("ObilazakId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ObilazakId"));

                    b.Property<DateTime>("DatumObilaska")
                        .HasColumnType("datetime2");

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<int>("NekretninaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("VrijemeObilaska")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isOdobren")
                        .HasColumnType("bit");

                    b.HasKey("ObilazakId");

                    b.HasIndex(new[] { "KorisnikId" }, "IX_Obilazak_KorisnikId");

                    b.HasIndex(new[] { "NekretninaId" }, "IX_Obilazak_NekretninaId");

                    b.ToTable("Obilazak", (string)null);
                });

            modelBuilder.Entity("ProdajaNekretnina.Services.Database.Problem", b =>
                {
                    b.Property<int>("ProblemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProblemId"));

                    b.Property<DateTime>("DatumNastankaProblema")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatumPrijave")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DatumRjesenja")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsVecPrijavljen")
                        .HasColumnType("bit");

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<int>("NekretninaId")
                        .HasColumnType("int");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpisRjesenja")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("ProblemId");

                    b.HasIndex(new[] { "KorisnikId" }, "IX_Problem_KorisnikId");

                    b.HasIndex(new[] { "NekretninaId" }, "IX_Problem_NekretninaId");

                    b.HasIndex(new[] { "StatusId" }, "IX_Problem_StatusId");

                    b.ToTable("Problem", (string)null);
                });

            modelBuilder.Entity("ProdajaNekretnina.Services.Database.ReccomendResult", b =>
                {
                    b.Property<int>("NekretninaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NekretninaId"));

                    b.Property<int>("DrugaNekretninaId")
                        .HasColumnType("int");

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<int>("PrvaNekretninaId")
                        .HasColumnType("int");

                    b.Property<int>("TrecaNekretninaId")
                        .HasColumnType("int");

                    b.HasKey("NekretninaId");

                    b.ToTable("ReccomendResult", (string)null);
                });

            modelBuilder.Entity("ProdajaNekretnina.Services.Database.Recenzija", b =>
                {
                    b.Property<int>("RecenzijaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecenzijaId"));

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<int>("KupacId")
                        .HasColumnType("int");

                    b.Property<float>("VrijednostZvjezdica")
                        .HasColumnType("real");

                    b.HasKey("RecenzijaId");

                    b.HasIndex(new[] { "KorisnikId" }, "IX_Recenzija_KorisnikId");

                    b.HasIndex(new[] { "KupacId" }, "IX_Recenzija_KupacId");

                    b.ToTable("Recenzija", (string)null);
                });

            modelBuilder.Entity("ProdajaNekretnina.Services.Database.Slika", b =>
                {
                    b.Property<int>("SlikaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SlikaId"));

                    b.Property<byte[]>("BajtoviSlike")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("NekretninaId")
                        .HasColumnType("int");

                    b.HasKey("SlikaId");

                    b.HasIndex(new[] { "NekretninaId" }, "IX_Slika_NekretninaId");

                    b.ToTable("Slika", (string)null);
                });

            modelBuilder.Entity("ProdajaNekretnina.Services.Database.Status", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"));

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StatusId");

                    b.ToTable("Status", (string)null);
                });

            modelBuilder.Entity("ProdajaNekretnina.Services.Database.TipAkcije", b =>
                {
                    b.Property<int>("TipAkcijeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TipAkcijeId"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TipAkcijeId");

                    b.ToTable("TipAkcije");
                });

            modelBuilder.Entity("ProdajaNekretnina.Services.Database.TipNekretnine", b =>
                {
                    b.Property<int>("TipNekretnineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TipNekretnineId"));

                    b.Property<string>("NazivTipa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpisTipa")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TipNekretnineId");

                    b.ToTable("TipNekretnine", (string)null);
                });

            modelBuilder.Entity("ProdajaNekretnina.Services.Database.Uloge", b =>
                {
                    b.Property<int>("UlogaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UlogaId"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UlogaId");

                    b.ToTable("Uloge", (string)null);
                });

            modelBuilder.Entity("ProdajaNekretnina.Services.Database.Agencija", b =>
                {
                    b.HasOne("ProdajaNekretnina.Services.Database.Korisnici", "Korisnik")
                        .WithMany("Agencijas")
                        .HasForeignKey("KorisnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("ProdajaNekretnina.Services.Database.Agent", b =>
                {
                    b.HasOne("ProdajaNekretnina.Services.Database.Korisnici", "Korisnik")
                        .WithMany("Agents")
                        .HasForeignKey("KorisnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("ProdajaNekretnina.Services.Database.Grad", b =>
                {
                    b.HasOne("ProdajaNekretnina.Services.Database.Drzava", "Drzava")
                        .WithMany("Grads")
                        .HasForeignKey("DrzavaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drzava");
                });

            modelBuilder.Entity("ProdajaNekretnina.Services.Database.KomentariAgentima", b =>
                {
                    b.HasOne("ProdajaNekretnina.Services.Database.Korisnici", "Korisnik")
                        .WithMany("KomentariAgentimas")
                        .HasForeignKey("KorisnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProdajaNekretnina.Services.Database.Kupci", "Kupac")
                        .WithMany("KomentariAgentimas")
                        .HasForeignKey("KupacId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Korisnik");

                    b.Navigation("Kupac");
                });

            modelBuilder.Entity("ProdajaNekretnina.Services.Database.KorisniciUloge", b =>
                {
                    b.HasOne("ProdajaNekretnina.Services.Database.Korisnici", "Korisnik")
                        .WithMany("KorisniciUloges")
                        .HasForeignKey("KorisnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProdajaNekretnina.Services.Database.Uloge", "Uloga")
                        .WithMany("KorisniciUloges")
                        .HasForeignKey("UlogaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Korisnik");

                    b.Navigation("Uloga");
                });

            modelBuilder.Entity("ProdajaNekretnina.Services.Database.KorisnikAgencija", b =>
                {
                    b.HasOne("ProdajaNekretnina.Services.Database.Agencija", "Agencija")
                        .WithMany("KorisnikAgencijas")
                        .HasForeignKey("AgencijaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProdajaNekretnina.Services.Database.Korisnici", "Korisnik")
                        .WithMany("KorisnikAgencijas")
                        .HasForeignKey("KorisnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agencija");

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("ProdajaNekretnina.Services.Database.KorisnikNekretninaWish", b =>
                {
                    b.HasOne("ProdajaNekretnina.Services.Database.Korisnici", "Korisnik")
                        .WithMany("KorisnikNekretninaWishs")
                        .HasForeignKey("KorisnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProdajaNekretnina.Services.Database.Nekretnina", "Nekretnina")
                        .WithMany("KorisnikNekretninaWishs")
                        .HasForeignKey("NekretninaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Korisnik");

                    b.Navigation("Nekretnina");
                });

            modelBuilder.Entity("ProdajaNekretnina.Services.Database.Lokacija", b =>
                {
                    b.HasOne("ProdajaNekretnina.Services.Database.Drzava", "Drzava")
                        .WithMany("Lokacijas")
                        .HasForeignKey("DrzavaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProdajaNekretnina.Services.Database.Grad", "Grad")
                        .WithMany("Lokacijas")
                        .HasForeignKey("GradId")
                        .IsRequired();

                    b.Navigation("Drzava");

                    b.Navigation("Grad");
                });

            modelBuilder.Entity("ProdajaNekretnina.Services.Database.Nekretnina", b =>
                {
                    b.HasOne("ProdajaNekretnina.Services.Database.Korisnici", "Korisnik")
                        .WithMany("Nekretninas")
                        .HasForeignKey("KorisnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProdajaNekretnina.Services.Database.Lokacija", "Lokacija")
                        .WithMany("Nekretninas")
                        .HasForeignKey("LokacijaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProdajaNekretnina.Services.Database.TipNekretnine", null)
                        .WithMany("Nekretninas")
                        .HasForeignKey("TipNekretnineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Korisnik");

                    b.Navigation("Lokacija");
                });

            modelBuilder.Entity("ProdajaNekretnina.Services.Database.NekretninaAgenti", b =>
                {
                    b.HasOne("ProdajaNekretnina.Services.Database.Korisnici", "Korisnik")
                        .WithMany("NekretninaAgentis")
                        .HasForeignKey("KorisnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProdajaNekretnina.Services.Database.Nekretnina", "Nekretnina")
                        .WithMany("NekretninaAgentis")
                        .HasForeignKey("NekretninaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Korisnik");

                    b.Navigation("Nekretnina");
                });

            modelBuilder.Entity("ProdajaNekretnina.Services.Database.NekretninaTipAkcije", b =>
                {
                    b.HasOne("ProdajaNekretnina.Services.Database.Nekretnina", "Nekretnina")
                        .WithMany("NekretninaTipAkcijes")
                        .HasForeignKey("NekretninaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProdajaNekretnina.Services.Database.TipAkcije", "TipAkcije")
                        .WithMany("NekretninaTipAkcijes")
                        .HasForeignKey("TipAkcijeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nekretnina");

                    b.Navigation("TipAkcije");
                });

            modelBuilder.Entity("ProdajaNekretnina.Services.Database.Obilazak", b =>
                {
                    b.HasOne("ProdajaNekretnina.Services.Database.Korisnici", "Korisnik")
                        .WithMany("Obilazaks")
                        .HasForeignKey("KorisnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProdajaNekretnina.Services.Database.Nekretnina", "Nekretnina")
                        .WithMany("Obilazaks")
                        .HasForeignKey("NekretninaId")
                        .IsRequired();

                    b.Navigation("Korisnik");

                    b.Navigation("Nekretnina");
                });

            modelBuilder.Entity("ProdajaNekretnina.Services.Database.Problem", b =>
                {
                    b.HasOne("ProdajaNekretnina.Services.Database.Korisnici", "Korisnik")
                        .WithMany("Problems")
                        .HasForeignKey("KorisnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProdajaNekretnina.Services.Database.Nekretnina", "Nekretnina")
                        .WithMany("Problems")
                        .HasForeignKey("NekretninaId")
                        .IsRequired();

                    b.HasOne("ProdajaNekretnina.Services.Database.Status", "Status")
                        .WithMany("Problems")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Korisnik");

                    b.Navigation("Nekretnina");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("ProdajaNekretnina.Services.Database.Recenzija", b =>
                {
                    b.HasOne("ProdajaNekretnina.Services.Database.Korisnici", "Korisnik")
                        .WithMany("Recenzijas")
                        .HasForeignKey("KorisnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProdajaNekretnina.Services.Database.Kupci", "Kupac")
                        .WithMany("Recenzijas")
                        .HasForeignKey("KupacId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Korisnik");

                    b.Navigation("Kupac");
                });

            modelBuilder.Entity("ProdajaNekretnina.Services.Database.Slika", b =>
                {
                    b.HasOne("ProdajaNekretnina.Services.Database.Nekretnina", "Nekretnina")
                        .WithMany("Slikas")
                        .HasForeignKey("NekretninaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nekretnina");
                });

            modelBuilder.Entity("ProdajaNekretnina.Services.Database.Agencija", b =>
                {
                    b.Navigation("KorisnikAgencijas");
                });

            modelBuilder.Entity("ProdajaNekretnina.Services.Database.Drzava", b =>
                {
                    b.Navigation("Grads");

                    b.Navigation("Lokacijas");
                });

            modelBuilder.Entity("ProdajaNekretnina.Services.Database.Grad", b =>
                {
                    b.Navigation("Lokacijas");
                });

            modelBuilder.Entity("ProdajaNekretnina.Services.Database.Korisnici", b =>
                {
                    b.Navigation("Agencijas");

                    b.Navigation("Agents");

                    b.Navigation("KomentariAgentimas");

                    b.Navigation("KorisniciUloges");

                    b.Navigation("KorisnikAgencijas");

                    b.Navigation("KorisnikNekretninaWishs");

                    b.Navigation("NekretninaAgentis");

                    b.Navigation("Nekretninas");

                    b.Navigation("Obilazaks");

                    b.Navigation("Problems");

                    b.Navigation("Recenzijas");
                });

            modelBuilder.Entity("ProdajaNekretnina.Services.Database.Kupci", b =>
                {
                    b.Navigation("KomentariAgentimas");

                    b.Navigation("Recenzijas");
                });

            modelBuilder.Entity("ProdajaNekretnina.Services.Database.Lokacija", b =>
                {
                    b.Navigation("Nekretninas");
                });

            modelBuilder.Entity("ProdajaNekretnina.Services.Database.Nekretnina", b =>
                {
                    b.Navigation("KorisnikNekretninaWishs");

                    b.Navigation("NekretninaAgentis");

                    b.Navigation("NekretninaTipAkcijes");

                    b.Navigation("Obilazaks");

                    b.Navigation("Problems");

                    b.Navigation("Slikas");
                });

            modelBuilder.Entity("ProdajaNekretnina.Services.Database.Status", b =>
                {
                    b.Navigation("Problems");
                });

            modelBuilder.Entity("ProdajaNekretnina.Services.Database.TipAkcije", b =>
                {
                    b.Navigation("NekretninaTipAkcijes");
                });

            modelBuilder.Entity("ProdajaNekretnina.Services.Database.TipNekretnine", b =>
                {
                    b.Navigation("Nekretninas");
                });

            modelBuilder.Entity("ProdajaNekretnina.Services.Database.Uloge", b =>
                {
                    b.Navigation("KorisniciUloges");
                });
#pragma warning restore 612, 618
        }
    }
}
